//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseManager.DatabaseManagerServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DatabaseManagerServiceReference.IDatabaseManager")]
    public interface IDatabaseManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/ChangeOutputValue", ReplyAction="http://tempuri.org/IDatabaseManager/ChangeOutputValueResponse")]
        void ChangeOutputValue(string t, double v, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/ChangeOutputValue", ReplyAction="http://tempuri.org/IDatabaseManager/ChangeOutputValueResponse")]
        System.Threading.Tasks.Task ChangeOutputValueAsync(string t, double v, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/Init", ReplyAction="http://tempuri.org/IDatabaseManager/InitResponse")]
        void Init();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/Init", ReplyAction="http://tempuri.org/IDatabaseManager/InitResponse")]
        System.Threading.Tasks.Task InitAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetOutputValue", ReplyAction="http://tempuri.org/IDatabaseManager/GetOutputValueResponse")]
        string[] GetOutputValue(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetOutputValue", ReplyAction="http://tempuri.org/IDatabaseManager/GetOutputValueResponse")]
        System.Threading.Tasks.Task<string[]> GetOutputValueAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/ChangeScanMode", ReplyAction="http://tempuri.org/IDatabaseManager/ChangeScanModeResponse")]
        void ChangeScanMode(string tagName, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/ChangeScanMode", ReplyAction="http://tempuri.org/IDatabaseManager/ChangeScanModeResponse")]
        System.Threading.Tasks.Task ChangeScanModeAsync(string tagName, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddAlarm", ReplyAction="http://tempuri.org/IDatabaseManager/AddAlarmResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        void AddAlarm(object[] info, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddAlarm", ReplyAction="http://tempuri.org/IDatabaseManager/AddAlarmResponse")]
        System.Threading.Tasks.Task AddAlarmAsync(object[] info, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetAITagNames", ReplyAction="http://tempuri.org/IDatabaseManager/GetAITagNamesResponse")]
        string[] GetAITagNames(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetAITagNames", ReplyAction="http://tempuri.org/IDatabaseManager/GetAITagNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetAITagNamesAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetScanValue", ReplyAction="http://tempuri.org/IDatabaseManager/GetScanValueResponse")]
        string[] GetScanValue(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetScanValue", ReplyAction="http://tempuri.org/IDatabaseManager/GetScanValueResponse")]
        System.Threading.Tasks.Task<string[]> GetScanValueAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddTags", ReplyAction="http://tempuri.org/IDatabaseManager/AddTagsResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        void AddTags(object[] info, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddTags", ReplyAction="http://tempuri.org/IDatabaseManager/AddTagsResponse")]
        System.Threading.Tasks.Task AddTagsAsync(object[] info, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/RemoveTags", ReplyAction="http://tempuri.org/IDatabaseManager/RemoveTagsResponse")]
        void RemoveTags(string tagName, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/RemoveTags", ReplyAction="http://tempuri.org/IDatabaseManager/RemoveTagsResponse")]
        System.Threading.Tasks.Task RemoveTagsAsync(string tagName, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetTagNames", ReplyAction="http://tempuri.org/IDatabaseManager/GetTagNamesResponse")]
        string[] GetTagNames(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetTagNames", ReplyAction="http://tempuri.org/IDatabaseManager/GetTagNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetTagNamesAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/RegisterUser", ReplyAction="http://tempuri.org/IDatabaseManager/RegisterUserResponse")]
        bool RegisterUser(string username, string password, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/RegisterUser", ReplyAction="http://tempuri.org/IDatabaseManager/RegisterUserResponse")]
        System.Threading.Tasks.Task<bool> RegisterUserAsync(string username, string password, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/LogIn", ReplyAction="http://tempuri.org/IDatabaseManager/LogInResponse")]
        string LogIn(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/LogIn", ReplyAction="http://tempuri.org/IDatabaseManager/LogInResponse")]
        System.Threading.Tasks.Task<string> LogInAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/LogOut", ReplyAction="http://tempuri.org/IDatabaseManager/LogOutResponse")]
        void LogOut(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/LogOut", ReplyAction="http://tempuri.org/IDatabaseManager/LogOutResponse")]
        System.Threading.Tasks.Task LogOutAsync(string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDatabaseManagerChannel : DatabaseManager.DatabaseManagerServiceReference.IDatabaseManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DatabaseManagerClient : System.ServiceModel.ClientBase<DatabaseManager.DatabaseManagerServiceReference.IDatabaseManager>, DatabaseManager.DatabaseManagerServiceReference.IDatabaseManager {
        
        public DatabaseManagerClient() {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void ChangeOutputValue(string t, double v, string token) {
            base.Channel.ChangeOutputValue(t, v, token);
        }
        
        public System.Threading.Tasks.Task ChangeOutputValueAsync(string t, double v, string token) {
            return base.Channel.ChangeOutputValueAsync(t, v, token);
        }
        
        public void Init() {
            base.Channel.Init();
        }
        
        public System.Threading.Tasks.Task InitAsync() {
            return base.Channel.InitAsync();
        }
        
        public string[] GetOutputValue(string token) {
            return base.Channel.GetOutputValue(token);
        }
        
        public System.Threading.Tasks.Task<string[]> GetOutputValueAsync(string token) {
            return base.Channel.GetOutputValueAsync(token);
        }
        
        public void ChangeScanMode(string tagName, string token) {
            base.Channel.ChangeScanMode(tagName, token);
        }
        
        public System.Threading.Tasks.Task ChangeScanModeAsync(string tagName, string token) {
            return base.Channel.ChangeScanModeAsync(tagName, token);
        }
        
        public void AddAlarm(object[] info, string token) {
            base.Channel.AddAlarm(info, token);
        }
        
        public System.Threading.Tasks.Task AddAlarmAsync(object[] info, string token) {
            return base.Channel.AddAlarmAsync(info, token);
        }
        
        public string[] GetAITagNames(string token) {
            return base.Channel.GetAITagNames(token);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAITagNamesAsync(string token) {
            return base.Channel.GetAITagNamesAsync(token);
        }
        
        public string[] GetScanValue(string token) {
            return base.Channel.GetScanValue(token);
        }
        
        public System.Threading.Tasks.Task<string[]> GetScanValueAsync(string token) {
            return base.Channel.GetScanValueAsync(token);
        }
        
        public void AddTags(object[] info, string token) {
            base.Channel.AddTags(info, token);
        }
        
        public System.Threading.Tasks.Task AddTagsAsync(object[] info, string token) {
            return base.Channel.AddTagsAsync(info, token);
        }
        
        public void RemoveTags(string tagName, string token) {
            base.Channel.RemoveTags(tagName, token);
        }
        
        public System.Threading.Tasks.Task RemoveTagsAsync(string tagName, string token) {
            return base.Channel.RemoveTagsAsync(tagName, token);
        }
        
        public string[] GetTagNames(string token) {
            return base.Channel.GetTagNames(token);
        }
        
        public System.Threading.Tasks.Task<string[]> GetTagNamesAsync(string token) {
            return base.Channel.GetTagNamesAsync(token);
        }
        
        public bool RegisterUser(string username, string password, string token) {
            return base.Channel.RegisterUser(username, password, token);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterUserAsync(string username, string password, string token) {
            return base.Channel.RegisterUserAsync(username, password, token);
        }
        
        public string LogIn(string username, string password) {
            return base.Channel.LogIn(username, password);
        }
        
        public System.Threading.Tasks.Task<string> LogInAsync(string username, string password) {
            return base.Channel.LogInAsync(username, password);
        }
        
        public void LogOut(string token) {
            base.Channel.LogOut(token);
        }
        
        public System.Threading.Tasks.Task LogOutAsync(string token) {
            return base.Channel.LogOutAsync(token);
        }
    }
}
