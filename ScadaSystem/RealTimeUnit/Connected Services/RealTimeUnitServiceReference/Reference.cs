//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RealTimeUnit.RealTimeUnitServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RealTimeUnitServiceReference.IRealTimeUnit")]
    public interface IRealTimeUnit {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/WriteValue", ReplyAction="http://tempuri.org/IRealTimeUnit/WriteValueResponse")]
        void WriteValue(string address, double value, byte[] hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/WriteValue", ReplyAction="http://tempuri.org/IRealTimeUnit/WriteValueResponse")]
        System.Threading.Tasks.Task WriteValueAsync(string address, double value, byte[] hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/IsAddressAvailable", ReplyAction="http://tempuri.org/IRealTimeUnit/IsAddressAvailableResponse")]
        bool IsAddressAvailable(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/IsAddressAvailable", ReplyAction="http://tempuri.org/IRealTimeUnit/IsAddressAvailableResponse")]
        System.Threading.Tasks.Task<bool> IsAddressAvailableAsync(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/LeavePublicKey", ReplyAction="http://tempuri.org/IRealTimeUnit/LeavePublicKeyResponse")]
        void LeavePublicKey(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/LeavePublicKey", ReplyAction="http://tempuri.org/IRealTimeUnit/LeavePublicKeyResponse")]
        System.Threading.Tasks.Task LeavePublicKeyAsync(string key);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRealTimeUnitChannel : RealTimeUnit.RealTimeUnitServiceReference.IRealTimeUnit, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RealTimeUnitClient : System.ServiceModel.ClientBase<RealTimeUnit.RealTimeUnitServiceReference.IRealTimeUnit>, RealTimeUnit.RealTimeUnitServiceReference.IRealTimeUnit {
        
        public RealTimeUnitClient() {
        }
        
        public RealTimeUnitClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RealTimeUnitClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RealTimeUnitClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RealTimeUnitClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void WriteValue(string address, double value, byte[] hash) {
            base.Channel.WriteValue(address, value, hash);
        }
        
        public System.Threading.Tasks.Task WriteValueAsync(string address, double value, byte[] hash) {
            return base.Channel.WriteValueAsync(address, value, hash);
        }
        
        public bool IsAddressAvailable(string address) {
            return base.Channel.IsAddressAvailable(address);
        }
        
        public System.Threading.Tasks.Task<bool> IsAddressAvailableAsync(string address) {
            return base.Channel.IsAddressAvailableAsync(address);
        }
        
        public void LeavePublicKey(string key) {
            base.Channel.LeavePublicKey(key);
        }
        
        public System.Threading.Tasks.Task LeavePublicKeyAsync(string key) {
            return base.Channel.LeavePublicKeyAsync(key);
        }
    }
}
